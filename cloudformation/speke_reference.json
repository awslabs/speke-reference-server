{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "SPEKE Reference Server (ID: DEV_0_0_0)",
    "Resources": {
        "KeyBucketOriginAccessIdentity": {
            "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "Properties": {
                "CloudFrontOriginAccessIdentityConfig": {
                    "Comment": {
                        "Fn::Join": [
                            "", [
                                "SPEKE Origin Access Identity for ",
                                {
                                    "Ref": "KeyBucket"
                                }
                            ]
                        ]
                    }
                }
            }
        },
        "KeyBucketCloudFrontDistribution": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
                "DistributionConfig": {
                    "Comment": {
                        "Fn::Join": [
                            "", [
                                "SPEKE CDN for ",
                                {
                                    "Ref": "KeyBucket"
                                }
                            ]
                        ]
                    },
                    "Enabled": true,
                    "PriceClass": "PriceClass_All",
                    "DefaultCacheBehavior": {
                        "TargetOriginId": {
                            "Ref": "KeyBucket"
                        },
                        "ViewerProtocolPolicy": "https-only",
                        "MinTTL": 0,
                        "AllowedMethods": [
                            "HEAD",
                            "GET"
                        ],
                        "CachedMethods": [
                            "HEAD",
                            "GET"
                        ],
                        "ForwardedValues": {
                            "QueryString": false
                        }
                    },
                    "Origins": [{
                        "DomainName": {
                            "Fn::Join": [
                                "", [{
                                        "Ref": "KeyBucket"
                                    },
                                    ".s3.amazonaws.com"
                                ]
                            ]
                        },
                        "Id": {
                            "Ref": "KeyBucket"
                        },
                        "S3OriginConfig": {
                            "OriginAccessIdentity": {
                                "Fn::Join": [
                                    "", ["origin-access-identity/cloudfront/",
                                        {
                                            "Ref": "KeyBucketOriginAccessIdentity"
                                        }
                                    ]
                                ]
                            }
                        }
                    }],
                    "Restrictions": {
                        "GeoRestriction": {
                            "RestrictionType": "none",
                            "Locations": []
                        }
                    },
                    "ViewerCertificate": {
                        "CloudFrontDefaultCertificate": "true",
                        "MinimumProtocolVersion": "TLSv1"
                    }
                }
            }
        },
        "KeyBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
                "Bucket": {
                    "Ref": "KeyBucket"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Id": "PolicyForCloudFrontPrivateContent",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "CanonicalUser": {
                                "Fn::GetAtt": [
                                    "KeyBucketOriginAccessIdentity",
                                    "S3CanonicalUserId"
                                ]
                            }
                        },
                        "Action": "s3:GetObject",
                        "Resource": {
                            "Fn::Join": [
                                "", [{
                                        "Fn::GetAtt": [
                                            "KeyBucket",
                                            "Arn"
                                        ]
                                    },
                                    "/*"
                                ]
                            ]
                        }

                    }]
                }
            }
        },
        "KeyBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [{
                        "ServerSideEncryptionByDefault": {
                            "SSEAlgorithm": "AES256"
                        }
                    }]
                },
                "LifecycleConfiguration": {
                    "Rules": [{
                        "ExpirationInDays": {
                            "Ref": "KeyRetentionDays"
                        },
                        "Id": "Expire old keys",
                        "Status": "Enabled"
                    }]
                },
                "CorsConfiguration": {
                    "CorsRules": [{
                        "AllowedHeaders": [
                            "*"
                        ],
                        "AllowedMethods": [
                            "GET"
                        ],
                        "AllowedOrigins": [
                            "*"
                        ],
                        "MaxAge": "3000"
                    }]
                }
            }
        },
        "SPEKEServerLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Condition": "RequiresSPEKEServerLambdaLayer",
            "Properties": {
                "Content": {
                    "S3Bucket" : {
                        "Fn::Join": [
                            "-", [
                                "rodeolabz",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "speke/speke-libs-DEV_0_0_0.zip"
                }
            }
        },
        "SPEKEServerLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Fn::Join": [
                            "-", [
                                "rodeolabz",
                                {
                                    "Ref": "AWS::Region"
                                }
                            ]
                        ]
                    },
                    "S3Key": "speke/speke-reference-lambda-DEV_0_0_0.zip"
                },
                "Layers": {
                    "Fn::If": [
                        "RequiresSPEKEServerLambdaLayer",
                        [
                            {
                                "Ref": "SPEKEServerLambdaLayer"
                            }
                        ],
                        []
                    ]
                },
                "Environment": {
                    "Variables": {
                        "KEYSTORE_BUCKET": {
                            "Ref": "KeyBucket"
                        },
                        "KEYSTORE_URL": {
                            "Fn::Join": [
                                "", [
                                    "https://",
                                    {
                                        "Fn::GetAtt": [
                                            "KeyBucketCloudFrontDistribution",
                                            "DomainName"
                                        ]
                                    }
                                ]
                            ]
                        },
                        "PLAYREADY_PSSH_BOX": {
                            "Ref": "PlayReadyPSSHBox"
                        },
                        "PLAYREADY_PROTECTION_HEADER": {
                            "Ref": "PlayReadyHeader"
                        },
                        "PLAYREADY_CONTENT_PROTECTION_DATA": {
                            "Ref": "PlayreadyContentProtectionData"
                        },
                        "PLAYREADY_HLS_SIGNALING_DATA_MEDIA": {
                            "Ref": "PlayreadyHlsSignalingDataMedia"
                        },
                        "PLAYREADY_HLS_SIGNALING_DATA_MASTER": {
                            "Ref": "PlayreadyHlsSignalingDataMaster"
                        },
                        "PLAYREADY_CONTENT_KEY": {
                            "Ref": "PlayReadyContentKey"
                        },
                        "WIDEVINE_PSSH_BOX": {
                            "Ref": "WidevinePSSHBox"
                        },
                        "WIDEVINE_PROTECTION_HEADER": {
                            "Ref": "WidevineHeader"
                        },
                        "WIDEVINE_CONTENT_PROTECTION_DATA": {
                            "Ref": "WidevineContentProtectionData"
                        },
                        "WIDEVINE_HLS_SIGNALING_DATA_MEDIA": {
                            "Ref": "WidevineHlsSignalingDataMedia"
                        },
                        "WIDEVINE_HLS_SIGNALING_DATA_MASTER": {
                            "Ref": "WidevineHlsSignalingDataMaster"
                        },
                        "FAIRPLAY_HLS_SIGNALING_DATA_MEDIA": {
                            "Ref": "FairplayHlsSignalingDataMedia"
                        },
                        "FAIRPLAY_HLS_SIGNALING_DATA_MASTER": {
                            "Ref": "FairplayHlsSignalingDataMaster"
                        }
                    }
                },
                "Handler": "key_server.server_handler",
                "MemorySize": 3008,
                "Role": {
                    "Fn::GetAtt": [
                        "SPEKEServerLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.9",
                "Timeout": 15
            }
        },
        "SPEKEServerLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "lambda.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                },
                "Path": "/"
            }
        },
        "SPEKEServerAPI": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Body": {
                    "swagger": "2.0",
                    "info": {
                        "version": "2018-03-27T20:22:37Z",
                        "title": "SPEKEReferenceAPI"
                    },
                    "host": "q7m9eqv3o8.execute-api.us-east-1.amazonaws.com",
                    "basePath": "/EkeStage",
                    "schemes": [
                        "https"
                    ],
                    "paths": {
                        "/copyProtection": {
                            "post": {
                                "responses": {
                                    "200": {
                                        "description": "200 response",
                                        "headers": {
                                            "Speke-User-Agent": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "500": {
                                        "description": "500 response"
                                    }
                                },
                                "security": [{
                                    "sigv4": []
                                }],
                                "x-amazon-apigateway-integration": {
                                    "uri": {
                                        "Fn::Join": [
                                            "", [
                                                "arn:aws:apigateway:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":lambda:path/2015-03-31/functions/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "SPEKEServerLambda",
                                                        "Arn"
                                                    ]
                                                },
                                                "/invocations"
                                            ]
                                        ]
                                    },
                                    "responses": {
                                        "default": {
                                            "statusCode": "200",
                                            "responseParameters": {
                                                "method.response.header.Speke-User-Agent": "integration.response.header.Speke-User-Agent"
                                            }
                                        },
                                        "Error.*": {
                                            "statusCode": "500"
                                        }
                                    },
                                    "passthroughBehavior": "when_no_match",
                                    "httpMethod": "POST",
                                    "type": "aws_proxy"
                                }
                            }
                        }
                    },
                    "securityDefinitions": {
                        "sigv4": {
                            "type": "apiKey",
                            "name": "Authorization",
                            "in": "header",
                            "x-amazon-apigateway-authtype": "awsSigv4"
                        }
                    },
                    "x-amazon-apigateway-binary-media-types": [
                        "*/*"
                    ]
                }
            }
        },
        "SPEKEServerAPIDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
                "Description": "Default stage deployment for SPEKE Server API",
                "RestApiId": {
                    "Ref": "SPEKEServerAPI"
                },
                "StageName": "EkeStage"
            }
        },
        "SPEKESecretsManagerPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "SPEKESecretsManagerPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": "secretsmanager:GetSecretValue",
                            "Resource": {
                                "Fn::Sub": "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:speke/*"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "secretsmanager:GetRandomPassword",
                                "secretsmanager:CreateSecret"
                            ],
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "SPEKEServerLambdaRole"
                }]
            }
        },
        "SPEKEServerKeyBucketPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "SPEKEServerKeyBucketPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "s3:PutObject",
                            "s3:PutObjectAcl"
                        ],
                        "Resource": {
                            "Fn::Join": [
                                "", [{
                                        "Fn::GetAtt": [
                                            "KeyBucket",
                                            "Arn"
                                        ]
                                    },
                                    "/*"
                                ]
                            ]
                        }
                    }]
                },
                "Roles": [{
                    "Ref": "SPEKEServerLambdaRole"
                }]
            }
        },
        "MediaPackageInvokeSPEKEPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "MediaPackageInvokeSPEKEPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": [
                            "execute-api:Invoke"
                        ],
                        "Resource": [{
                            "Fn::Join": [
                                "", [
                                    "arn:aws:execute-api:",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ":",
                                    {
                                        "Ref": "AWS::AccountId"
                                    },
                                    ":",
                                    {
                                        "Ref": "SPEKEServerAPI"
                                    },
                                    "/*/POST/copyProtection"
                                ]
                            ]
                        }]
                    }]
                },
                "Roles": [{
                    "Ref": "MediaPackageInvokeSPEKERole"
                }]
            }
        },
        "MediaPackageInvokeSPEKERole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "mediapackage.amazonaws.com",
                                "mediapackagev2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                }
            }
        },
        "MediaConvertInvokeSPEKEPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "MediaConvertInvokeSPEKEPolicy",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "execute-api:Invoke"
                            ],
                            "Resource": [{
                                "Fn::Join": [
                                    "", [
                                        "arn:aws:execute-api:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":",
                                        {
                                            "Ref": "SPEKEServerAPI"
                                        },
                                        "/*/POST/copyProtection"
                                    ]
                                ]
                            }]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:*"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "Roles": [{
                    "Ref": "MediaConvertInvokeSPEKERole"
                }]
            }
        },
        "MediaConvertInvokeSPEKERole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "mediaconvert.amazonaws.com",
                                "mediaconvert.us-east-1.amazonaws.com",
                                "mediaconvert.ap-northeast-1.amazonaws.com",
                                "mediaconvert.ap-southeast-1.amazonaws.com",
                                "mediaconvert.ap-southeast-2.amazonaws.com",
                                "mediaconvert.eu-central-1.amazonaws.com",
                                "mediaconvert.eu-west-1.amazonaws.com",
                                "mediaconvert.us-east-1.amazonaws.com",
                                "mediaconvert.us-west-1.amazonaws.com",
                                "mediaconvert.us-west-2.amazonaws.com"

                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }]
                }
            }
        },
        "InvokeSPEKEServerPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:invokeFunction",
                "FunctionName": {
                    "Fn::GetAtt": [
                        "SPEKEServerLambda",
                        "Arn"
                    ]
                },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [
                        "", [
                            "arn:aws:execute-api:",
                            {
                                "Ref": "AWS::Region"
                            },
                            ":",
                            {
                                "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref": "SPEKEServerAPI"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        }
    },
    "Parameters": {
        "KeyRetentionDays": {
            "Default": "2",
            "Description": "Number of days to store keys in S3 before automatic removal",
            "Type": "Number",
            "MinValue": "1",
            "ConstraintDescription": "Please enter a number of days (1 or greater)"
        },
        "RequiresSPEKEServerLambdaLayer": {
            "Default": "false",
            "Description": "true if a lambda layer is required to avoid runtime error on SPEKE server lambda, or false otherwise",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "PlayReadyContentKey": {
            "Default": "",
            "Description": "Encoded PlayReady content key to use for encryption",
            "Type": "String"
        },
        "PlayReadyHeader": {
            "Default": "",
            "Description": "Encoded PlayReady Header that is included in the encrypted content",
            "Type": "String"
        },
        "PlayReadyPSSHBox": {
            "Default": "",
            "Description": "Encoded PlayReady Protection System Specific Header box",
            "Type": "String"
        },
        "PlayreadyContentProtectionData": {
            "Default": "",
            "Description": "Encoded PlayReady ContentProtectionData that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "PlayreadyHlsSignalingDataMedia": {
            "Default": "",
            "Description": "Encoded PlayReady HlsSignalingData for media (ext-x-key) that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "PlayreadyHlsSignalingDataMaster": {
            "Default": "",
            "Description": "Encoded PlayReady HlsSignalingData for master (ext-x-session-key) that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "WidevineHeader": {
            "Default": "",
            "Description": "Encoded Widevine Header that is included in the encrypted content",
            "Type": "String"
        },
        "WidevinePSSHBox": {
            "Default": "",
            "Description": "Encoded Widevine Protection System Specific Header box",
            "Type": "String"
        },
        "WidevineContentProtectionData": {
            "Default": "",
            "Description": "Encoded Widevine ContentProtectionData that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "WidevineHlsSignalingDataMedia": {
            "Default": "",
            "Description": "Encoded Widevine HlsSignalingData for media (ext-x-key) that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "WidevineHlsSignalingDataMaster": {
            "Default": "",
            "Description": "Encoded Widevine HlsSignalingData for master (ext-x-session-key) that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "FairplayHlsSignalingDataMedia": {
            "Default": "",
            "Description": "Encoded Fairplay HlsSignalingData for media (ext-x-key) that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        },
        "FairplayHlsSignalingDataMaster": {
            "Default": "",
            "Description": "Encoded Fairplay HlsSignalingData for master (ext-x-session-key) that is included in the encrypted content and is supported in Speke V2.0 only",
            "Type": "String"
        }
    },
    "Conditions": {
        "RequiresSPEKEServerLambdaLayer": {
            "Fn::Equals": [
                {
                    "Ref": "RequiresSPEKEServerLambdaLayer"
                },
                "true"
             ]
        }
    },
    "Outputs": {
        "KeyBucket": {
            "Value": {
                "Ref": "KeyBucket"
            },
            "Description": "Bucket name for the SPEKE key cache"
        },
        "MediaPackageSPEKERoleArn": {
            "Value": {
                "Fn::GetAtt": [
                    "MediaPackageInvokeSPEKERole",
                    "Arn"
                ]
            },
            "Description": "ARN of the role for MediaPackage to invoke the SPEKE server"
        },
        "MediaConvertSPEKERoleArn": {
            "Value": {
                "Fn::GetAtt": [
                    "MediaConvertInvokeSPEKERole",
                    "Arn"
                ]
            },
            "Description": "ARN of the role for MediaConvert to invoke the SPEKE server"
        },
        "SPEKEServerURL": {
            "Value": {
                "Fn::Join": [
                    "", [
                        "https://",
                        {
                            "Ref": "SPEKEServerAPI"
                        },
                        ".execute-api.",
                        {
                            "Ref": "AWS::Region"
                        },
                        ".amazonaws.com/EkeStage/copyProtection"
                    ]
                ]
            },
            "Description": "URL for the SPEKE server that is called by MediaPackage"
        }
    }
}